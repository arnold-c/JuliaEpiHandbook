{
  "hash": "94182c31637f6866c85ddd6c57592c05",
  "result": {
    "engine": "julia",
    "markdown": "---\ndate: \"2024-07-01\"\nengine: julia\n---\n\n# Julia Basics {.unnumbered}\n## Key Terms\n\n- **REPL**: The Julia REPL is the Julia Read-Eval-Print-Loop.\n    This is the interactive command line interface for Julia.\n    When you start Julia in the command line (terminal in Mac/Linux, command prompt in Windows), you are in the REPL, and it is a common way to interact with Julia.\n- **Package**: A package is a collection of code that can be used to extend the functionality of Julia and complete specific tasks.\n    Packages are installed using the `Pkg` package manager.\n- **Variable**: A variable is a value or object that you have assigned a name.\n    This may be as simple as a number or a sentence (a string variable), or as complex as a model or a plot.\n- **Function**: A function is a block of code that performs a specific task.\n    Functions are called by name and can take arguments, before completing some computation and returning a value or object.\n    Sometimes functions are written and called for their side effects, i.e. they do not directly return an object, but instead perform some action.\n- **Method**: A method is a specific implementation of a function.\n- **Multiple Dispatch**: Multiple dispatch is a really exciting feature of Julia, but also one that is more difficult to understand for newer programmers.\n    The basic premise is that in Julia, how functions behave depends on the types of the arguments that are passed to them.\n    For example, the `*` operator (function) will behave differently if you try to multiply two integers (whole numbers), two floats (numbers with decimals), two matrices, any combination of these etc.\n    Each of these different behaviors is a different **method** of the `*` function.\n\n## What to Expect\n\nAs mentioned previously, this book (and page) is not meant to provide a ground-up description of everything you need to know about Julia.\nInstead, we'll give an overview of some of the key concepts and features that should provide enough of an understanding that you can start using Julia with reasonable confidence.\nIt'll likely take a couple of passes through this page to really get a good understanding of the concepts, and that's okay!\nIt's meant to act as a reference so you can come back to it later if you don't understand something in the later, more-applied, sections.\nAt the bottom of this page are some additional resources that you can use to gain a deeper understanding of Julia.\n\n## Data Types and Structures\n\nThere are a number of different data types and structures in Julia.\nHere are the key ones for your to be aware of.\n\n**Data Types**:\n\n- **Integer**\n  - Whole numbers\n- **Float**\n  - Numbers with decimals\n- **Boolean**\n  - `true` or `false` (written in lowercase)\n    - `true` has equal value to `1` e.g. `1 == true`\n    - `false` has equal value to `0` e.g. `0 == false`\n\n::: {.callout-note}\n\nIn Julia, the `==` operator is used to check if two values are equal.\nIt returns a boolean value, `true` or `false`, depending on whether the values are equal or not i.e. `1 == true` returns `true` because `1` and `true` are equal!\nIt is different to the `=` operator, which is used to assign a value to a variable (see [this section below](#assignment) for more details on variables).\n\nIn Julia there is also the `===` operator, which is used to check if two values are identical.\nThis is different to the `==` operator, which checks if two values are equal.\nFor example, `1 == true` returns `true` because `1` and `true` are equal, but `1 === true` returns `false` because `1` and `true` are not identical (they are not stored in the same location in memory in the computer).\n\n:::\n\n- **Char**\n  - A single character e.g. `\"H\"`\n- **String**\n    - A sequence of characters e.g. `\"Hello World!\"`\n\n**Data Structures**:\n\n- **Array**\n  - An **array** is a collection of values that are all the same type.\n  Arrays can be one-dimensional (**vectors**), two-dimensional (**matrices**), or multi-dimensional.\n  Arrays are **mutable**, meaning that they can be changed after they are created.\n  An example of an array is `[1, 2, 3]`\n- **DataFrame**\n  - A **DataFrame** is a special type of **array** created by the `{DataFrames}` package that is used to store tabular data.\n  It is a collection of columns, where each column is an **array** of the same type.**DataFrames** are **mutable**, meaning that they can be changed after they are created.\n- **Tuple**\n  - A **tuple** is a collection of values that do not all have to be the same type.\n  **Tuples** are very useful because they require very little memory, so are fast to create and access.\n  They are also **immutable**, meaning that they cannot be changed after they are created, but because they are so fast to create, you can just create a new tuple with the values you want.\n  An example of a **tuple** is `(\"John\", 25, 1.8)`\n- **Dictionary**\n  - A dictionary is a collection of key-value pairs that do not need to be of the same type.\n    **Dictionaries** are **mutable**, and are very useful for storing data that you want to access by a key (i.e. name), rather than an index.\n    For example, you might want to store a person's name, age, and height e.g. `Dict(\"name\" => \"John\", \"age\" => 25, \"height\" => 1.8)`\n- **Named Tuple**\n  - A variant of the **tuple** is the **named tuple**.\n  It is a cross between a **tuple** and a **dictionary**, and therefore has the benefits of being able to access values with keys instead of indices (though you use indices), but it is **immutable** and much smaller and faster than a **dictionary**.\n  For our person example, a **named tuple** would look like `(; name = \"John\", age = 25, height = 1.8)`.\n  Note the `;` at the beginning of the tuple - the use of semicolons is common in Julia to separate named arguments from unnamed arguments in functions, and while it is not essential to create a named tuple with length > 1, it must be used for a named tuple with only one element (`(name = \"John\", )` with a `,` after the pair could similar be used for 1-element named tuples).\n- **Structs**\n  - A **struct** is a custom data type that you can create to store data.\n  It is similar to a **named tuple** in that it is **immutable** and you can access values with keys instead of indices.\n  One reason you may prefer to use a **struct** over a **named tuple** is that you can define methods for a **struct** (see [the multiple dispatch section](#multiple-dispatch) for more details).\n  Creating **structs** are out of the scope of this book, but it is important to know that they exist and are a useful tool for organizing your data.\n  If you want to learn more about **structs**, check out the [documentation](https://docs.julialang.org/en/v1/manual/types/#Composite-Types) and [this tutorial](https://www.youtube.com/watch?v=pHQe3PiYY1w).\n\nIf you have an object and want to tell what type it is, you can use the `typeof()` function.\nIf you have an array and want to tell what type the elements of the array are, you can use the `eltype()` function.\n\n## Variables\n\nVariables really just stored pieces of information that you've given a name to.\nThis is useful because it allows you to run a calculation, for example, and then save it for use later on.\nThat way you don't need to run the calculation again, you can just pull the value out of storage!\nA slightly different example is if you have a constant value that you use multiple times in your code, e.g. the size of a population.\nRather than typing out the value every time you need it, you can just store it in a variable and use the variable name instead.\nThis not only saves you time and makes your code more readable, but also can reduce the chance of making a mistake (e.g. if you accidentally type the wrong value when copying it to a new calculation).\n\n### Assignment\n\nNow we know what **variables** are, let's look at how to create them.\nAs mentioned earlier, we use the `=` operator to assign a value to a **variable**.\nFor example, if we wanted to create a variable called `x` and assign it the value `1`, we would write `x = 1`.\nBut we aren't just restricted to numbers, we can assign any type of value to a variable.\nThis includes **strings**, **arrays**, **tuples**, **dictionaries**, and **structs**.\n\nEarlier, when talking about data structures, we used the example of a person's name, age, and height.\nLet's see how we can create **tuples**, **dictionaries**, and **dataframes** to store this information.\n\n::: {#2 .cell execution_count=1}\n``` {.julia .cell-code}\nusing DataFrames # We need to load the DataFrames package to create a DataFrame\n\njohn_tuple = (\"John\", 25, 1.8)\njohn_ntuple = (name = \"John\", age = 25, height = 1.8)\njohn_dict = Dict(\"name\" => \"John\", \"age\" => 25, \"height\" => 1.8)\njohn_df = DataFrame(name = \"John\", age = 25, height = 1.8);\n```\n:::\n\n\n\n::: {.callout-note}\n\nWhen creating a dictionary, you can use the `=>` operator to assign a value to a key.\nThe key is always on the left, and the value is always on the right.\n\nAt the end of the test array assignment, we have a semicolon (`;`).\nThis has nothing to do with the array, but is used to suppress the output of the assignment, so when we run the code, we don't see the array printed to the screen.\n\n:::\n\nBecause a person's name is a string, their age is an integer, and their height is a float, we cannot create an array to store this information, because arrays can only store values of the same type.\nTo show how we can create and access **arrays**, let's create a **vector** (1-D array) of multiple people's names, as well as a random **matrix** (2-D array).\n\n::: {#4 .cell execution_count=1}\n``` {.julia .cell-code}\npeople_vec = [\"John\", \"Jane\", \"Joe\"]\ntest_arr = [1 2 3; 4 5 6; 7 8 9]\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n3×3 Matrix{Int64}:\n 1  2  3\n 4  5  6\n 7  8  9\n```\n:::\n:::\n\n\n\n::: {.callout-note}\n\nWhen creating a matrix, you can use a semi-colon to separate rows in the matrix.\nOne alternative is to specify the exact positions of each value e.g.\n\n```julia\ntest_arr = [\n    1 2 3\n    4 5 6\n    7 8 9\n]\n```\n\n:::\n\n### Accessing Values\n\nTo access the value stored in a variable, we can often use indices.\nJulia, like R, is a 1-indexed language, meaning that the first element in an array has an index of 1, not 0 (like Python).\nIn our examples, the first element of the objects we created is the person's name, so we can access it with an index of 1.\n\n::: {#6 .cell execution_count=1}\n``` {.julia .cell-code}\njohn_tuple[1] # \"John\"\njohn_ntuple[1] # \"John\"\npeople_vec[1]\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n\"John\"\n```\n:::\n:::\n\n\n\nFor **dataframes** and multi-dimensional **arrays**, we have to make a slight modification to use a comma that separates the indices for each dimension.\nIn an array/dataframe, the first index is the row number, and the second index is the column number.\nTo access the element in the first row and the first column of the array, we would use the following code.\n\n::: {#8 .cell execution_count=1}\n``` {.julia .cell-code}\ntest_arr[1, 1]\njohn_df[1, 1]\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n\"John\"\n```\n:::\n:::\n\n\n\nIf we want to access an entire row or column, we can use the `:` operator.\nFor example, if we want to access the first column of the array, we can use the following code.\n\n::: {#10 .cell execution_count=1}\n``` {.julia .cell-code}\ntest_arr[:, 1]\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n3-element Vector{Int64}:\n 1\n 4\n 7\n```\n:::\n:::\n\n\n\n::: {#12 .cell execution_count=1}\n``` {.julia .cell-code}\njohn_df[:, 1]\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n1-element Vector{String}:\n \"John\"\n```\n:::\n:::\n\n\n\nIf we want to access the first row of the array, we can use the following code.\n\n::: {#14 .cell execution_count=1}\n``` {.julia .cell-code}\ntest_arr[1, :]\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n3-element Vector{Int64}:\n 1\n 2\n 3\n```\n:::\n:::\n\n\n\n::: {.callout-note}\n\nIn all cases where we used the `:` operator, we get a **column vector** as the output, not a single value, regardless of whether we are extracting a row or a column from the original array!\n\n:::\n\nHowever, none of these methods work for **dictionaries**.\nFor dictionaries, you need to specify the key of the value you want to access.\n\n::: {#16 .cell execution_count=1}\n``` {.julia .cell-code}\njohn_dict[\"name\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n\"John\"\n```\n:::\n:::\n\n\n\nYou can also use the key (or column name) to access the value in **dataframes** and **named tuples**.\n\n::: {#18 .cell execution_count=1}\n``` {.julia .cell-code}\njohn_df[1, :name] # The : operator before the column name turns it into a symbol that can be used to index the dataframe\njohn_df[1, \"name\"]\n\njohn_ntuple.name\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n\"John\"\n```\n:::\n:::\n\n\n\n## Functions\n### Overview\n\nFunctions are a core part of programming in Julia, and programming in general.\nA function is a block of code that performs a specific task.\nAs has been said before, a function is like a recipe you might use to bake a cake.\nThe recipe tells you what ingredients you need, how to combine them, and how long to bake them for.\nAnd like a recipe, a function can be used over and over again to produce the same result (assuming you have identical inputs).\nThis is a really powerful concept, and helps make your work and research reproducible by breaking up your code into small, reusable, and understandable chunks.\nAnd because it is meant to be reused, it will save you time in cases when you need to do the same thing multiple times (you don't want to have to write the same code over and over again)!\n\nSo let's look at a simple example of a function in Julia, and use it to explore some of the key concepts of functions.\n\nSay we want to take a number, multiply it by 2, and then divide the result by 3.\nYou could just write this out explicitly, but what if you want to do this for a bunch of different numbers?\nThis is where a function comes in handy.\n\n::: {#20 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction multiply_by_two_divide_by_three(x)\n    y = x * 2\n    z = y / 3\n    return z # it's good practice to explicitly return a value (or nothing in special cases)\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nmultiply_by_two_divide_by_three (generic function with 1 method)\n```\n:::\n:::\n\n\n\nThis function takes a single **argument**, `x`, and then multiplies it by 2 and divides it by 3.\nThe `return` keyword tells Julia what value to return from the function.\nIt also tells Julia that the function is finished, and it will not execute any code after the `return` statement.\n\nLet's try using this function.\n\n::: {#22 .cell execution_count=1}\n``` {.julia .cell-code}\nmultiply_by_two_divide_by_three(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n2.0\n```\n:::\n:::\n\n\n\n::: {#24 .cell execution_count=1}\n``` {.julia .cell-code}\nmultiply_by_two_divide_by_three(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n6.666666666666667\n```\n:::\n:::\n\n\n\nNote that in both of these examples, a floating point number is returned i.e., a number with decimals.\n\n::: {.callout-note}\n\nWithout going into too much detail, it is good practice to give functions short, descriptive names.\nA good example would be `cumsum()` that is provided in Julia and calculates the cumulative sum of a vector.\n\nIf a function name is too long to write without separating the words, use snake case (words separated by underscores) e.g. `multiply_by_two_divide_by_three()` rather than leaving as a single block of text (`multiplybytwodividebythree()`), or using camelCase (`multiplyByTwoDivideByThree()`).\n\nIt is also good practice to add a docstring to your function.\nThis is a short description of what the function does, and can be accessed by typing `?` followed by the function name in the REPL.\nThis means that you can quickly understand exactly what a function does without having to work your way through the code, really helping others who may read your code, but also future you if you revisit a project.\n\nAn example of adding a docstring to a function may be as simple as adapting our original code to look like the following.\n\n```julia\n\"\"\"\n    multiply_by_two_divide_by_three(x)\n\nMultiply `x` by 2 and divide by 3.\n\"\"\"\nfunction multiply_by_two_divide_by_three(x)\n    y = x * 2\n    z = y / 3\n    return z\nend\n```\n\nRead more about docstrings [here](https://docs.julialang.org/en/v1/manual/documentation/).\n\n:::\n\n### Arguments & Keyword Arguments\n\nUnlike R, Julia makes a distinction between arguments and keyword arguments.\nArguments are the values that are passed to a function.\nIn the example function above, `x` is an argument.\nIn Julia, arguments are **positional**, meaning that the order in which you pass them to a function matters.\nTo see this in practice, let's write a new function that takes two arguments, `x` and `y`, and multiplies them together after minusing one from argument `x` and adding one to argument `y`.\n\n::: {#26 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction multiply_together_offsets(x, y)\n    z = (x - 1) * (y + 1)\n    return z\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nmultiply_together_offsets (generic function with 1 method)\n```\n:::\n:::\n\n\n\nBecause Julia uses positional arguments, the following two function calls will return different values, even though the numbers `5` and `10` are used in both.\n\n::: {#28 .cell execution_count=1}\n``` {.julia .cell-code}\nmultiply_together_offsets(5, 10)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n44\n```\n:::\n:::\n\n\n\n::: {#30 .cell execution_count=1}\n``` {.julia .cell-code}\nmultiply_together_offsets(10, 5)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n54\n```\n:::\n:::\n\n\n\n**Keyword arguments** are arguments that are passed to a function by name.\nGenerally speaking, keyword arguments are used to set default values for arguments that can be changed by the user.\nLet's modify our `multiply_together_offsets` function to use keyword arguments.\n\n::: {#32 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction multiply_together_offsets(x, y; offset_x = 1, offset_y = 1)\n    z = (x - offset_x) * (y + offset_y)\n    return z\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nmultiply_together_offsets (generic function with 1 method)\n```\n:::\n:::\n\n\n\nWe have added two new arguments to the function, `offset_x` and `offset_y`, and given them default values of `1`.\n\n::: {.callout-tip}\n\nIt is not necessary, but it is generally good style to place keyword arguments after all positional arguments, as well as separating them from positional arguments using a semi-colon (`;`), rather than a comma.\n\n:::\n\nNow, when we call the function, we can specify the values of these arguments by name.\n\n::: {#34 .cell execution_count=1}\n``` {.julia .cell-code}\nmultiply_together_offsets(5, 10)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n44\n```\n:::\n:::\n\n\n\n::: {#36 .cell execution_count=1}\n``` {.julia .cell-code}\nmultiply_together_offsets(5, 10; offset_x = 2, offset_y = 3)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n39\n```\n:::\n:::\n\n\n\n### Scope\n\nScope is a relatively complicated concept, but it is important to understand it in order to write functions that are easy to understand and debug.\nScope refers to the visibility of variables within a function.\nIn Julia, variables that are defined within a function are not visible outside of the function.\nThe reverse is not true, however.\nVariables that are defined outside of a function are visible within the function, but cannot be modified.\n\nLet's look at some examples.\n\n::: {#38 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction add_one(x)\n    y = x + 1\n    return y\nend\n\nadd_one(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n6\n```\n:::\n:::\n\n\n\n::: {#40 .cell execution_count=1}\n``` {.julia .cell-code}\ny\n```\n\n::: {.cell-output .cell-output-error}\n```\nUndefVarError: UndefVarError(:y)\nUndefVarError: `y` not defined\n```\n:::\n:::\n\n\n\nIn this case, `y` is defined within the function `add_one()` i.e. is a **local variable**, and is therefore not visible outside of the function, but it can be used within the function!\n\n::: {#42 .cell execution_count=1}\n``` {.julia .cell-code}\nglobal_x = 5\n\nfunction print_global_x()\n    return println(global_x)\nend\n\nprint_global_x()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5\n```\n:::\n:::\n\n\n\nIn this example, `global_x` is defined outside of the function `print_global_x()`, and is therefore visible within the function, but it cannot be modified.\n\n::: {.callout-warning}\n\nIt's not good practice to access **global variables** in your functions.\nInstead, if you want to use a variable in your function, pass it as an argument.\n\n:::\n\n::: {#44 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction modify_global_x()\n    global_x = 10\n    return global_x\nend\n\nmodify_global_x()\n\nglobal_x\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n5\n```\n:::\n:::\n\n\n\nHere, we have tried to modify `global_x` within the function `modify_global_x()`, but this has not worked.\nIt looks like it worked when we called the function, but when we check the value of `global_x` outside of the function, it is still `5`.\n\n### Multiple Dispatch\n\nMultiple dispatch is the idea that the behavior of a function depends on the types of the arguments that are passed to it (as well as the number of arguments).\nTo illustrate this, let's go back to our original example function `multiply_by_two_divide_by_three()`.\n\nIn the example above, we passed a single argument to the function, and it returned a floating point number.\nBut what if we wanted to pass multiple numbers to the function, and have it return a vector of the results?\nWe could do this by specifying another **method** of the function that accepts a tuple of numbers as an argument.\n\n::: {#46 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction multiply_by_two_divide_by_three(x::Tuple)\n    y = zeros(Float64, length(x))\n    z = similar(y)\n\n    for i in eachindex(x)\n        y[i] = x[i] * 2\n        z[i] = y[i] / 3\n    end\n\n    return z\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nmultiply_by_two_divide_by_three (generic function with 2 methods)\n```\n:::\n:::\n\n\n\nWe have defined a new method of the function (i.e., a new way of using the function) by specifying the type of the argument `x` as a tuple (`::Tuple`), and this is illustrated in the printout `multiply_by_two_divide_by_three (generic function with 2 methods)`.\n\n::: {.callout-note}\n\nYou don't have to understand exactly what the code is doing here (but have a look at the [for loop](#for-loop) section if you're interested).\nNeither is the code particularly efficient, but it's a relatively readable way to illustrate the concept of multiple dispatch.\n\n:::\n\nNow let's test out our new function method\n\n::: {#48 .cell execution_count=1}\n``` {.julia .cell-code}\nmultiply_by_two_divide_by_three((1, 2, 3))\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n3-element Vector{Float64}:\n 0.6666666666666666\n 1.3333333333333333\n 2.0\n```\n:::\n:::\n\n\n\nAnd we can see that the original method that just takes a single number as an argument still works.\n\n::: {#50 .cell execution_count=1}\n``` {.julia .cell-code}\nmultiply_by_two_divide_by_three(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n2.0\n```\n:::\n:::\n\n\n\n::: {.callout-warning}\n\nIt is important to note that **keyword arguments** are not considered in multiple dispatch i.e., trying to define a new method of a function that differs only by keyword arguments *will not* create a new method, but just overwrite the old one.\nSo if you want/need a new method, use **positional arguments**.\n\n:::\n\n## Packages\n\nPackages are an essential part of the Julia ecosystem.\nYou've already seen an example of a package in action: `{DataFrames}`.\nAt their core, a package is a way for someone to share code, data, and documentation with other people.\nBy design, Julia can't do everything for everyone straight out of the box.\nNot only would it be an impossible task for the Julia developers to create a language that can do everything, but it would also be incredibly slow to load and run.\nInstead, packages extend the abilities of Julia by providing additional features (through functions) that are not included in the base language.\n\nThe `{DataFrames}` package, for example, creates a special data structure that is very easy to read, as well as providing a number of functions that make it easy to manipulate and analyze data.\n\nTo add a package to your Julia environment (project), you can use the `add` command in the package manager (accessed by pressing `]` in the REPL).\nThen, you can use the `using` command to load the package into your current Julia session.\nSee [this page](new-project.qmd) for more information in the context of setting up a new project.\n\n## Control Flow\n\nControl flow refers to the order in which the statements in a program are executed.\nThere are many different ways to control how a program is executed, but we will focus on the most common ones here.\nSee the [Julia documentation](https://docs.julialang.org/en/v1/manual/control-flow/) for more information.\n\n### If Statements\n\nIf statements are a way to control whether or not a block of code is executed, and fall under the general category of **conditional evaluation** (but I think \"if statements\" gives you a more intuitive sense of what we're talking about in this section).\nThere are many uses for conditional evaluation, so we'll just show you some examples of how to use it, and you can explore further if you need to.\nThe following is an example from the [Julia documentation](https://docs.julialang.org/en/v1/manual/control-flow/#man-conditional-evaluation-1).\n\n::: {#52 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction number_relations(x, y)\n    if x < y\n        relation = \"less than\"\n    elseif x == y\n        relation = \"equal to\"\n    else\n        relation = \"greater than\"\n    end\n    return println(\"x is \", relation, \" y.\")\nend\n\nnumber_relations(2, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is greater than y.\n```\n:::\n:::\n\n\n\nIn this example we are using an `if` statement to determine the relationship between two numbers.\nIt's important to note that the **conditional statements** are evaluated in sequence, and the first one that evaluates to `true` is executed i.e. `if` then `elseif` then `else` in this example.\n\n::: {.callout-note}\n\n`elseif` and `else` statements are both optional (i.e. just an `if` statement is valid), and you can have as many `elseif` statements as you like (including 0 i.e. just `if` and `else` statements).\n\n:::\n\n#### Short-Circuit Evaluation\n\nIf you want to check multiple conditions, you can use the `&&` (and) and `||` (or) operators.\nThese is known as **short-circuit evaluation**.\nFor example, if we wanted to check if a number is between 0 and 10, we could do the following.\n\n::: {#54 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction number_between(x)\n    if x > 0 && x < 10\n        println(\"x is between 0 and 10\")\n    else\n        println(\"x is not between 0 and 10\")\n    end\nend\n\nnumber_between(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is between 0 and 10\n```\n:::\n:::\n\n\n\n::: {#56 .cell execution_count=1}\n``` {.julia .cell-code}\nnumber_between(11)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is not between 0 and 10\n```\n:::\n:::\n\n\n\nIn `number_between(3)`, x is greater than 0 and less than 10, so both conditions evaluate to `true`, and the code in the `if` statement is executed.\nIn `number_between(11)`, x is greater than 0, but not less than 10, so while the first condition evaluates to `true`, the second condition evaluates to `false`, so the code in the `else` statement is executed.\nThis is important to understand - all conditions must evaluate to `true` for the code in the `if` statement to be executed!\nBased on this, try to think about why the following code also works.\n\n::: {#58 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction number_between2(x)\n    if x > 0 && ((x > 10) == false)\n        println(\"x is between 0 and 10\")\n    else\n        println(\"x is not between 0 and 10\")\n    end\nend\n\nnumber_between2(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is between 0 and 10\n```\n:::\n:::\n\n\n\n### Iteration\n\nIteration is a useful concept in programming, is a pretty intuitive way to think about many problems we come across in epidemiology (once you get used to it), and is very fast in Julia, so it's worth spending some time to understand it.\nDo not expect to understand everything about iteration after reading this section, and you will likely need to come back to refer to it as you go through the book, but hopefully it will provide a good starting point for you to explore further.\n\n#### For Loop\n\nThe most common way to iterate in Julia is using a `for` loop.\nWe have already seen a `for` loop in the [multiple dispatch](#multiple-dispatch) section, but let's look at a simpler example.\n\nLet's say we want to calculate the sum of the numbers from 1 to 10 (cumulative sum) i.e. 1 + 2 + 3 + ... + 10.\nJulia has an in-built function to do this (`cumsum()`), but let's write our own function to do it using a `for` loop.\n\nThere are multiple ways we could write this function, but the most intuitive way is to go through each of the numbers in 1 to 10, and add them to a running total.\n\n\n::: {#60 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction mycumsum(x)\n    y = 0 # Initialize our running total to 0\n\n    # For each number in x, add it to our running total\n    for i in x\n        y += x[i] # This is equivalent to y = y + x[i]\n    end\n\n    return y\nend\n\nmycumsum(1:10)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n55\n```\n:::\n:::\n\n\n\n#### While Loop\n\nAnother way to iterate is using a `while` loop.\nThe difference between a `for` loop and a `while` loop is that a `for` loop iterates over a sequence of values, whereas a `while` loop iterates until a condition is met.\nFor example, let's say we want to keep adding numbers to our running total until the total is greater than 100 (and stop counting).\nWe might not know how many numbers we need to add to get to 100, so we can't use a `for` loop, but we can use a `while` loop.\n\n::: {#62 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction mycumsum2(x)\n    y = 0 # Initialize our running total to 0\n    i = 1 # Initialize our counter to 1\n\n    # While our running total is less than 100, add the next number to our running total\n    while y < 100\n        y += x[i] # This is equivalent to y = y + x[i]\n        i += 1 # Update our counter so we can add the next number\n    end\n\n    return println(\"We added \", i, \" numbers to get to \", y)\nend\n\nmycumsum2(1:100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWe added 15 numbers to get to 105\n```\n:::\n:::\n\n\n\n::: {.callout-caution}\n\n`while` loops are very useful in many situations, but are more dangerous than `for` loops, because it's easy to get stuck in an infinite loop.\nFor example, if we accidentally started our cumulative sum between 0:100 and forgot to update our counter, we would never reach our condition of y < 100, and the loop would never end.\nTo avoid this, people often add `break` statements to their `while` loops, which will break out of the loop if a certain condition is met i.e. if we added 100 numbers and still haven't reached 100, we can early exit out of the loop.\nGenerally speaking, use a `for` loop if you can, and be careful when using `while` loops.\n\n:::\n\n#### Map\n\nAn alternative to loops is the `map()` function.\nIf you are familiar with **functional programming** (or the [`{purrr}`](https://github.com/tidyverse/purrr) package and functions in **R**), the `map()` function will be easy to grasp.\nIf not, not to worry as it's just a different method of applying a set of functions to each element in a sequence.\nThe main difference to be aware of is that each application of the function(s) happen independently from each other, so you can't increment a counter and then update a value from the prior iteration of a loop.\n\nSay we want to calculate take an array of integers and return an array of their squares.\nWe can use a for loop (shown in the folded code below) to do this.\nOr we could use the `map()` function, which accepts an array and a function as arguments.\n\n:::{.callout-note collapse=\"true\"}\n\n::: {#64 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction squares(x)\n    y = zeros(eltype(x), length(x))\n\n    for i in eachindex(x)\n        y[i] = x[i]^2\n    end\n    return y\nend\n\nsquares(1:10)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n10-element Vector{Int64}:\n   1\n   4\n   9\n  16\n  25\n  36\n  49\n  64\n  81\n 100\n```\n:::\n:::\n\n\n:::\n\n::: {#66 .cell execution_count=1}\n``` {.julia .cell-code}\nmap(x -> x^2, 1:10)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n10-element Vector{Int64}:\n   1\n   4\n   9\n  16\n  25\n  36\n  49\n  64\n  81\n 100\n```\n:::\n:::\n\n\n\nIn the above example, we are using an anonymous function that takes each element of the array `1:10`, assigns it to the variable `x`, and then squares it before returning it in a Vector.\nThe `map()` function returns a vector of the same length as the input array, which is nice when we know want the output vector to be the same length as the input vector, as it removes the need for us to manually perform **bounds checking**.\n\nIn slightly more complicated scenarios, the anonymous function may become unwieldy.\nHere, we can either write a named function that we use in the `map()` function, or use a `do` block.\n\n::: {#68 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction square_element(x)\n    return x^2\nend\n\nmap(square_element, 1:10)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n10-element Vector{Int64}:\n   1\n   4\n   9\n  16\n  25\n  36\n  49\n  64\n  81\n 100\n```\n:::\n:::\n\n\n\nMuch like the anonymous function, when we use a `do` block, we assign the elements being iterated over to a variable name that we can manipulate.\n\n::: {#70 .cell execution_count=1}\n``` {.julia .cell-code}\nmap(1:10) do x\n    x^2\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n10-element Vector{Int64}:\n   1\n   4\n   9\n  16\n  25\n  36\n  49\n  64\n  81\n 100\n```\n:::\n:::\n\n\n\nThe `do` block is useful when we only want to perform some operations once, so it's not necessary to create a named function.\nIt is also very helpful when we want to pass multiple arguments to a function, as we will see.\n\nHere, we have two vectors of the same length and we want to perform element-wise addition i.e., add the first index of each vector together, the second elements, and so on.\nDoing this without the `do` block is possible, but much more cumbersome.\nHere, we can use the `zip()` function to combine the two vectors into a vector of tuples that can be iterated over by `map()`.\n\n::: {#72 .cell execution_count=1}\n``` {.julia .cell-code}\nvec_a = 1:10\nvec_b = 11:20\n\nmap(zip(vec_a, vec_b)) do (a, b)\n    a + b\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n10-element Vector{Int64}:\n 12\n 14\n 16\n 18\n 20\n 22\n 24\n 26\n 28\n 30\n```\n:::\n:::\n\n\n\n::: {.callout-note collapse=\"true\"}\n\n::: {#74 .cell execution_count=1}\n``` {.julia .cell-code}\ncollect(zip(vec_a, vec_b))\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n10-element Vector{Tuple{Int64, Int64}}:\n (1, 11)\n (2, 12)\n (3, 13)\n (4, 14)\n (5, 15)\n (6, 16)\n (7, 17)\n (8, 18)\n (9, 19)\n (10, 20)\n```\n:::\n:::\n\n\n:::\n\n::: {.callout-note collapse=\"true\"}\nWithout the `do` block, we could write this.\nNote the `,` between the two closing parentheses in the anonymous function i.e., `...b),)`\n\n::: {#76 .cell execution_count=1}\n``` {.julia .cell-code}\nmap(\n    ((a, b),) -> a + b,\n    zip(vec_a, vec_b)\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n10-element Vector{Int64}:\n 12\n 14\n 16\n 18\n 20\n 22\n 24\n 26\n 28\n 30\n```\n:::\n:::\n\n\n:::\n\n## Additional Resources\n\nI'd recommend checking out the following resources to learn more about Julia (roughly in descending order of preference due to complexity and target audience)\n\n- [Scientific Computing for the Rest of Us](https://sciencecomputing.io)\n- [Julia Academy](https://juliaacademy.com)\n- [Julia Data Science](https://juliadatascience.io)\n- [Doggo JL](https://www.youtube.com/@doggodotjl)\n- [Julia Documentation](https://docs.julialang.org/en/v1/)\n- [Quantitative Economics with Julia](https://julia.quantecon.org/intro.html)\n- [Think Julia](https://benlauwens.github.io/ThinkJulia.jl/latest/book.html)\n- [PumasAI Tutorials](https://tutorials.pumas.ai)\n- [Julia For Economists Video Series](https://www.youtube.com/playlist?list=PLbuwVVKCI3sRW0Y5ehBFwdFVuyuy87ram)\n- [Advanced Scientific Computing: Producing Better Code](https://www.youtube.com/playlist?list=PL-G47MxHVTewUm5ywggLvmbUCNOD2RbKA)\n\n",
    "supporting": [
      "julia-basics_files"
    ],
    "filters": []
  }
}