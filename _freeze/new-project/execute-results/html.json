{
  "hash": "6923afaffec7775680cbde750e4ca241",
  "result": {
    "engine": "julia",
    "markdown": "---\ndate: \"2023-05-26\"\nengine: julia\n---\n\n# New Julia Project {.unnumbered}\n## First Time Julia Setup\n\n::: {.callout-note}\n\nYou only have to follow these steps the first time after you download a new version of Julia and set it as your working version.\n\n:::\n\nNow that we have a better understanding of both Julia and the VSCode user interface, let's create a new Julia project.\n\nFirst, open a fresh VSCode window.\nIf you already happen to be in a **workspace** (check in the \"Explorer\" panel), you can click on the \"File\" menu in the top left of the VSCode window, and then click \"New Window\".\nNow, open the *Command Palette* (keyboard shortcut `Cmd + Shift + P` on Mac or `Ctrl + Shift + P` on Windows or Linux) and type \"Julia: Start REPL\".\nDoing this should open up the integrated terminal with the Julia REPL running.\nType `pwd()` in the REPL and hit enter.\nIt should return your home directory (i.e. `/Users/<your-username>` on Mac or `C:\\Users\\<your-username>` on Windows).\nFrom here we want to add a package called `DrWatson` to our Julia installation.\nTo do this, type `]` in the REPL and hit enter.\nThis enters the `Pkg` REPL, which is a special REPL for managing Julia packages.\nHere you should see something like:\n\n::: {#2 .cell execution_count=0}\n``` {.julia .cell-code}\n(@v1.10) pkg>\n```\n:::\n\n\n\nNext, type `add DrWatson` and hit enter.\nThis will add the `DrWatson` package to your Julia installation, and will allow us to easily create new Julia projects in a consistent way that works well for epidemiology projects (among others).\n\n::: {.callout-note}\n\nIf you're still wondering why we're bothering with the `DrWatson` package, you can read more about it [below](#drwatson-project-structure).\n\n:::\n\n## Creating a Folder for Your Projects\n\nThe first thing we need to do is create a folder that will house all our individual project folders.\nTo try and make your life easy, I would recommend you create this folder in your home directory, and call it ***Repos/*** (or something similar).\nYou can do this with Finder on Mac or File Explorer on Windows.\n\n## Creating a Julia Project\n\nNow let's create our first Julia project folder.\nTo do this, go back to the Julia `Pkg` REPL and hit backspace.\nThis will return you to the normal Julia REPL.\nNow we need to navigate to the folder you just created.\nTo do this, type `cd(\"path/to/your/project/folder\")` and hit enter.\n\nFrom here, type `using DrWatson` and hit enter.\nThis will load the `DrWatson` package into your Julia session so you can use its functions.\n\nTo create the project folder, type `initialize_project(\"MyFirstProject\")` and hit enter.\nThis will create a new project folder ***MyFirstProject/*** in the folder you navigated to earlier e.g., ***/Users/username/Documents/Repos/MyFirstProject/***.\n\nNow you have a project folder, let's open it in VSCode.\nIn VSCode, click on the \"File\" menu in the top left of the VSCode window, and then click \"Open Folder...\".\nFrom here, navigate to the project folder you just created and click \"Open\".\nYou VSCode window should refresh and you should now see the name of your project folder in the top center of the VSCode window (as well as in the top left of the \"Explorer\" panel).\n\nNow, if you try to open the `Pkg` REPL again, you will see something different.\nInstead it'll say:\n\n::: {#4 .cell execution_count=0}\n``` {.julia .cell-code}\n(MyFirstProject) pkg>\n```\n:::\n\n\n\nYou're ready to start adding packages to your project!\nI would recommend starting with following packages:\n\n- `Revise`\n- `DrWatson`\n- `DataFrames`\n- `DataFramesMeta`\n- `CSV`\n- `IJulia`\n- `JuliaFormatter`\n- `CairoMakie`\n\nAs before, to add a package, type `add <package-name>` and hit enter (you can add multiple packages at once by separating them with spaces e.g. `add <package-1> <package-2>`).\n\n## Project Files\n\nWhen you create a new Julia project, it creates two files in the project folder:\n\n- ***Project.toml***: this is a TOML file that contains the names and versions of all the packages you have added to your project\n- ***Manifest.toml***: this is a TOML file that contains the names and versions of all the packages you have added to your project, as well as the names and versions of all the packages that those packages depend on.\nIt is automatically generated by Julia, and you should not edit it manually.\n\nEdit the ***Project.toml*** file to add your name in the authors field at the top of the file (you will need to create this), so it looks something like this:\n\n```{toml}\nname = \"MyFirstProject\"\nauthors = [\"My Name\"]\n\n[deps]\nCSV = \"336ed68f-0bac-5ca0-87d4-7b16caf5d00b\"\nCairoMakie = \"13f3f980-e62b-5c42-98c6-ff1f3baf88f0\"\nDataFrames = \"a93c6f00-e57d-5684-b7b6-d8193f3e46c0\"\nDataFramesMeta = \"1313f7d8-7da2-5740-9ea0-a2ca25f37964\"\nDrWatson = \"634d3b9d-ee7a-5ddf-bec9-22491ea816e1\"\nIJulia = \"7073ff75-c697-5162-941a-fcdaad2a7d2a\"\nJuliaFormatter = \"98e50ef6-434e-11e9-1051-2b60c6c9e899\"\nRevise = \"295af30f-e4ad-537b-8983-00126c2a3abe\"\n```\n\n## Creating & Running a Julia Script\n\nTo create a Julia script in your project, click on the \"File\" menu in the top left of the VSCode window, and then click \"New File\".\nAlternatively, you could use the keyboard shortcut `Cmd + N` on Mac or `Ctrl + N` on Windows or Linux.\nThis will open a new file in the VSCode editor, which you can then save.\nGiven we are using `DrWatson`, it is also good practice to save it in the ***scripts/*** folder.\nYou can save it with any file name you like, but it is good practice to save it with the `.jl` extension e.g., ***scripts/myscript.jl***.\n\nAt this point, you can start writing your Julia code.\nJust make sure that the first two lines of the script are:\n\n```julia\nusing DrWatson\nquickactivate(\"MyFirstProject\")\n```\n\n## Miscellaneous\n### `DrWatson` Project Structure {#drwatson-project-structure}\n\nIt may not be immediately obvious why we need to use `DrWatson` to create our Julia projects.\nIn fact, we don't need to use `DrWatson` to create our Julia projects, but it does make our lives a lot easier as it provides a consistent project structure that is easy to navigate.\n\nFirstly, it creates the following folders and files in your project folder (copied from the `DrWatson` documentation):\n\n```\n│projectdir          <- Project's main folder. It is initialized as a Git\n│                       repository with a reasonable .gitignore file.\n│\n├── _research        <- WIP scripts, code, notes, comments,\n│   |                   to-dos and anything in an alpha state.\n│   └── tmp          <- Temporary data folder.\n│\n├── data             <- **Immutable and add-only!**\n│\n├── plots            <- Self-explanatory.\n├── notebooks        <- Jupyter, Weave or any other mixed media notebooks.\n│\n├── papers           <- Scientific papers resulting from the project.\n│\n├── scripts          <- Various scripts, e.g. simulations, plotting, analysis,\n│   │                   The scripts use the `src` folder for their base code.\n│   └── intro.jl     <- Simple file that uses DrWatson and uses its greeting.\n│\n├── src              <- Source code for use in this project. Contains functions,\n│                       structures and modules that are used throughout\n│                       the project and in multiple scripts.\n│\n├── README.md        <- Optional top-level README for anyone using this project.\n├── .gitignore       <- by default ignores _research, data, plots, videos,\n│                       notebooks and latex-compilation related files.\n│\n├── Manifest.toml    <- Contains full list of exact package versions used currently.\n└── Project.toml     <- Main project file, allows activation and installation.\n                        Includes DrWatson by default.\n```\n\nIn addition to the `{DrWatson}` produced directories, I like to create an `out/` directory where all analysis outputs are created, e.g., the ***sims*** shown in the structure above, rather than saving them to the `data/` directory, as `{DrWatson}` suggests.\nThe reason for doing this is that it provides a very clear separation of input and output files, where inputs should never be modified, and outputs are files that should always be able to deleted and recreated using the code in the scripts.\nAs a result, the final structure of the project looks like this:\n\n\n```\n│projectdir          <- Project's main folder. It is initialized as a Git\n│                       repository with a reasonable .gitignore file.\n│\n├── _research        <- WIP scripts, code, notes, comments,\n│   |                   to-dos and anything in an alpha state.\n│   └── tmp          <- Temporary data folder.\n│\n├── data             <- **Immutable and add-only!**\n│   └── exp_raw      <- Raw experimental data.\n│\n├── out              <- **Immutable and add-only!**\n│   ├── exp_pro      <- Data from processing experiments.\n│   └── sims         <- Data resulting directly from simulations.\n│\n├── plots            <- Self-explanatory.\n├── notebooks        <- Jupyter, Weave or any other mixed media notebooks.\n│\n├── papers           <- Scientific papers resulting from the project.\n│\n├── scripts          <- Various scripts, e.g. simulations, plotting, analysis,\n│   │                   The scripts use the `src` folder for their base code.\n│   └── intro.jl     <- Simple file that uses DrWatson and uses its greeting.\n│\n├── src              <- Source code for use in this project. Contains functions,\n│                       structures and modules that are used throughout\n│                       the project and in multiple scripts.\n│\n├── README.md        <- Optional top-level README for anyone using this project.\n├── .gitignore       <- by default ignores _research, data, plots, videos,\n│                       notebooks and latex-compilation related files.\n│\n├── Manifest.toml    <- Contains full list of exact package versions used currently.\n└── Project.toml     <- Main project file, allows activation and installation.\n                        Includes DrWatson by default.\n```\n\nAbove providing us with a useful project structure, `DrWatson` also provides us with a number of very helpful functions.\n\nFor one, it provides us with the `quickactivate()` function that allows us to activate our project and environment when we're working in a script, so we can easily import all the packages we need, regardless of where the script is saved.\nThis means that we don't need to worry about activating our project in the REPL before we start working in a script.\nThis may not sound meaningful, but it's very easy to forget to activate your project in the REPL before you start working in a script, and then you end up with a bunch of errors because you haven't actually imported the packages you need.\nTo use this, make sure your first two lines of your script are always:\n\n```julia\nusing DrWatson\nquickactivate(\"MyFirstProject\")\n```\n\n<a name=\"drwatson-helpers\">And secondly, it provides us with convenient directory paths to the folders in our project.</a>\nFor example, if we want to access the `data` folder in our project, we can use the `datadir()` function, which will return the path to the `data` folder.\nSimilarly, if we wanted to save a plot to the `plots` folder, we could use `save(plotsdir(\"plot_object.png\"), plot_object)` function to save the plot in `plot_object` to the `plots` folder.\n\nMore details about the `DrWatson` project structure and associated functions can be found [here](https://juliadynamics.github.io/DrWatson.jl/stable/project/).\n\n### Naming Files\n\nWhen naming files and folders, it is important to be consistent and descriptive.\nIdeally the name will contain no spaces, and you can use dashes to separate words.\nSee [this presentation](https://speakerdeck.com/jennybc/how-to-name-files) by Jenny Bryan for more information on naming files and folders, but in short:\n\n- KISS (Keep It Simple Stupid): use simple and consistent file names\n  - It needs to be machine readable\n  - It needs to be human readable\n  - It needs to order well in a directory\n  - No special characters and no spaces!\n- Use YYYY-MM-DD date format\n- Use `-` to delimit words and `_` to delimit sections\n  - i.e. ***2019-01-19_my-data.csv***\n- Left-pad numbers\n  - i.e. ***01_my-data.csv*** vs ***1_my-data.csv***\n  - If you don’t, file orders get messed up when you get to double-digits\n\n",
    "supporting": [
      "new-project_files"
    ],
    "filters": []
  }
}