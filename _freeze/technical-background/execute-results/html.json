{
  "hash": "9cd74884e2f67801014265ae50507518",
  "result": {
    "engine": "julia",
    "markdown": "---\ndate: \"2023-05-20\"\nengine: julia\n---\n\n# Keywords, Code, and Other Formatting {.unnumbered}\n\n## General Formatting\n\nThroughout the book, you'll see some keywords, code, and other points that I'll try to delineate with the following formatting:\n\n::: {.callout-note}\nThis will be a note, and will be used to highlight important points, or to provide additional information.\n:::\n\n::: {.callout-tip}\nThis will be used to highlight a useful tip.\n:::\n\n::: {.callout-warning}\n\nThis will provide a warning that you may get an unexpected result if you're not careful.\n\n:::\n\n- `code` will be used to highlight code.\n- `{package}` will be used to denote a specific package, e.g., `{DataFrames}` denotes the `{DataFrames}` package.\n- `package.function()` will be used to denote a function that is part of a specific package, e.g., `DataFrames.subset()` denotes the `subset()` function from the `{DataFrames}` package.\nSome languages use a different convention, such as `package::function()` in R, but I will use the `package.function()` syntax listed above as this is how you would use a function in Julia.\n- **keywords** will be used to highlight keywords and phrases, e.g., **Git** or **GitHub**.\n    - **actions** will also be highlighted in this way, e.g., **commits** or **pushed** being the result of the code `git commit` or `git push`\n- ***files*** will be used to highlight file names, e.g., ***README.md*** or ***LICENSE***.\n- *italics* will be used for emphasis in certain circumstances, e.g., signifying a question from an interactive terminal command.\n\n## Packages\n\nThroughout this book, I will use a number of packages to help with the analysis and visualization of data.\nFor each section, I will provide a list of the packages used in a particular set of analyses at the top of the page.\nThe Julia language has an excellent package manager that makes it easy to install and use packages, and also share projects and collaborate with others without running into issues regarding dependencies that often plagues other languages.\nIn the next section, I will walk through the process of getting started with Julia, and therefore, the process of installing packages, but below you can see the full list of packages and the installed version of Julia used in this book.\n\n::: {#2 .cell execution_count=1}\n``` {.julia .cell-code}\nusing InteractiveUtils # Only required for notebook rendering\nversioninfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nJulia Version 1.10.4\nCommit 48d4fd48430 (2024-06-04 10:41 UTC)\nBuild Info:\n  Official https://julialang.org/ release\nPlatform Info:\n  OS: macOS (arm64-apple-darwin22.4.0)\n  CPU: 8 × Apple M1\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-15.0.7 (ORCJIT, apple-m1)\nThreads: 4 default, 0 interactive, 2 GC (on 4 virtual cores)\nEnvironment:\n  JULIA_NUM_THREADS = auto\n  JULIA_LOAD_PATH = @:@stdlib\n```\n:::\n:::\n\n\n\n::: {#4 .cell execution_count=1}\n``` {.julia .cell-code}\nusing Pkg\nPkg.status()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStatus `~/Documents/Repos/JuliaEpiHandbook/Project.toml`\n  [336ed68f] CSV v0.10.14\n⌃ [13f3f980] CairoMakie v0.12.2\n  [a93c6f00] DataFrames v1.6.1\n  [1313f7d8] DataFramesMeta v0.15.2\n  [634d3b9d] DrWatson v2.15.0\n⌃ [e9467ef8] GLMakie v0.10.2\n  [cd3eb016] HTTP v1.10.8\n⌃ [7073ff75] IJulia v1.24.2\n⌃ [c3a54625] JET v0.9.2\n  [0f8b85d8] JSON3 v1.14.0\n  [98e50ef6] JuliaFormatter v1.0.56\n  [70703baa] JuliaSyntax v0.4.8\n⌃ [295af30f] Revise v3.5.14\n  [db9b398d] Serde v3.1.0\n  [8ae5e7a9] TidierFiles v0.1.1\n⌃ [0656b61e] GLFW_jll v3.3.9+0\nInfo Packages marked with ⌃ have new versions available and may be upgradable.\n```\n:::\n:::\n\n\n\n## Code Style\n\nThere are many different ways to write code, and many different styles.\nBut, in the interest of consistency and ease of collaboration, I would strongly recommend you use the [`{JuliaFormatter}` package](https://domluna.github.io/JuliaFormatter.jl/dev/) to format your code according to a specific style guide.\nIn this book, I will use a lightly modified version of the [Blue style guide](https://github.com/invenia/BlueStyle), and you can see the specific changes to the default style in the ***.JuliaFormatter.toml*** file in the root directory of this book's GitHub repository.\nIn the next section, I will discuss how you can use the `{JuliaFormatter}` package to format your code.\n\n",
    "supporting": [
      "technical-background_files/figure-html"
    ],
    "filters": []
  }
}